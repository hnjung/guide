/*
	파일정보 : 환경설정 > 함수선언(@mixin, @function)
	업데이트 : 2024-08-01
*/

@use 'variable' as config;

/* 분기점 */
/** 특정 분기점의 최소 너비 */
@function breakpoint-min($name) {
	$min: map-get(config.$breakpoint, $name);
	@return if($min != 0, $min, null);
}
/** 특정 분기점의 최대 너비 */
@function breakpoint-max($name) {
	$breakpoint-name: map-keys(config.$breakpoint);
	$index: index($breakpoint-name, $name);
	$next-breakpoint: nth($breakpoint-name, $index + 1);

	/* 다음 분기점의 최소값에서 0.02px을 뺀 값을 최대값으로 반환 */
	$max: map-get(config.$breakpoint, $next-breakpoint) - 0.02;
	@return if($max > 0, $max, null);
}
/** 특정 분기점 이상 적용 */
@mixin media-up($name) {
	@media screen and (min-width: breakpoint-min($name)) {
		@content;
	}
}
/** 특정 분기점 이하 적용 */
@mixin media-down($name) {
	@media screen and (max-width: breakpoint-max($name)) {
		@content;
	}
}
/** 분기점과 분기점 내에서 적용 */
@mixin media-between($name-min, $name-max) {
	@media screen and (min-width: breakpoint-min($name-min)) and (max-width: breakpoint-max($name-max)) {
		@content;
	}
}
/** 특정 분기점 에서만 적용 */
@mixin media-only($name) {
	$min: breakpoint-min($name);
	$max: breakpoint-max($name);

	@media screen and (min-width: $min) and (max-width: $max) {
		@content;
	}
}

/* 색상 */
@function tint-color($color, $weight) {
	@return mix(white, $color, $weight);
}
@function shade-color($color, $weight) {
	@return mix(black, $color, $weight);
}
@function invert-color($color) {
	@return rgb(255 - red($color), 255 - green($color), 255 - blue($color));
}

/* 말줄임 */
@mixin ellipsis($max-width, $line: 1) {
	overflow: hidden;
	text-overflow: ellipsis;
	max-width: $max-width;
	@if ($line == 1) {
		display: inline-block;
		white-space: nowrap;
	} @else {
		display: -webkit-box;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: $line;
	}
}

/* 디스플레이 */
@mixin full-block {
	display: block;
	width: 100%;
	height: 100%;
}
@mixin full-layer($position: fixed) {
	position: $position;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
}

/* CSS 사용자 정의 속성 작성 도우미 */
@function find-match($arr, $key, $prefix) {
	@each $name, $value in $arr {
		@if $name == $key or $value == $key {
			@return var(#{$prefix}#{$name});
		}
	}
	@return null;
}

/** 색상, 폰트, 여백, 선두께, 모서리지름 */
@function variable($type, $value-or-option, $value: null) {
	$result: null;
	$prefix: --#{config.$prefix}#{$type}-;
	$valid: (config.$color, config.$font, config.$space, config.$border, config.$radius);

	/* 첫번째 매개변수 값 유효성 체크 */
	@if not index($valid, $type) {
		@error '⛔ Invalid argument for variable function: #{$type}';
	}

	/* 일부 매개변수의 세번째 매개변수 값 유효성 체크 */
	@if ($type == config.$space or $type == config.$border or $type == config.$radius) and $value != null {
		@error '⛔ Invalid argument for variable function: #{$value}';
	}

	/* 첫번째 매개변수가 색상인 경우 */
	@if $type == config.$color {
		@if $value == null {
			/* 두번째 매개변수 비교 후 리턴 */
			$result: find-match(config.$system-group, $value-or-option, $prefix)
				or find-match(config.$base-group, $value-or-option, '#{$prefix}#{config.$base}-')
				or find-match(config.$primary-group, $value-or-option, '#{$prefix}#{config.$primary}-')
				or $value-or-option;
		} @else {
			/* 세번째 매개변수 비교 후 리턴 */
			@if $value-or-option == config.$base {
				$result: find-match(config.$base-group, $value, '#{$prefix}#{config.$base}-');
			} @else if $value-or-option == config.$primary {
				$result: find-match(config.$primary-group, $value, '#{$prefix}#{config.$primary}-');
			} @else {
				$result: $value;
			}
		}
	/* 첫번째 매개변수가 폰트인 경우 */
	} @else if $type == config.$font {
		@if $value == null {
			/* 두번째 매개변수 비교 후 리턴 */
			$result: find-match(config.$font-weight, $value-or-option, $prefix);
			@if not $result {
				@each $category in map-keys(config.$font-size) {
					$temp-result: find-match(map-get(config.$font-size, $category), $value-or-option, '#{$prefix}#{$category}-');
					@if $temp-result {
						$result: $temp-result;
					}
				}
			}
			$result: $result or $value-or-option;
		} @else {
			/* 세번째 매개변수 비교 후 리턴 */
			@each $category in map-keys(config.$font-size) {
				@if $category == $value-or-option {
					$temp-result: find-match(map-get(config.$font-size, $category), $value, '#{$prefix}#{$category}-');
					@if $temp-result {
						$result: $temp-result;
					}
				}
			}
			$result: $result or $value;
		}
		/* 두번째, 세번째 매개변수의 비교값이 없고 숫자가 아닌 경우 */
		@if type-of($result) != 'string' and type-of($result) != 'number' {
			@error '⛔ Invalid argument for variable function: #{$value-or-option}';
		}
	/* 첫번째 매개변수가 여백, 선두께, 모서리지름인 경우 */
	} @else {
		$group: ();
		@if $type == config.$space {
			$group: config.$space-group;
		} @else if $type == config.$border {
			$group: config.$border-group;
		} @else if $type == config.$radius {
			$group: config.$radius-group;
		}
		$result: find-match($group, $value-or-option, $prefix) or $value-or-option;
	}

	@return $result;
}

/** 아이콘 */
@function icon($input) {
	@if map-has-key(config.$icon-group, $input) {
		@return $input;
	} @else {
		@each $key, $value in config.$icon-group {
			@if $value == $input {
				@return $key;
			}
		}
		@return $input;
	}
}
@mixin icon-block($input) {
	$size: icon($input);
	$var: var(--#{config.$prefix}icon-#{$size});

	@if type-of($input) == 'number' {
		$var: $input;
	}

	width: $var;
	height: $var;
}
@mixin icon($size, $x-or-type: 0, $y-or-type: 0, $optional-type: 'common') {
	$size: icon($size);
	$var: var(--#{config.$prefix}icon-#{$size});
	$x: 0;
	$y: 0;
	$type: 'common';

	@if type-of($x-or-type) == 'number' {
		$x: $x-or-type;
		@if type-of($y-or-type) == 'number' {
			$y: $y-or-type;
			$type: $optional-type;
		} @else if type-of($y-or-type) == 'string' {
			$type: $y-or-type;
		}
	} @else if type-of($x-or-type) == 'string' {
		$type: $x-or-type;
	}

	@include icon-block($size);
	background-image: url('#{config.$path-image}/#{$type}/icon-#{$size}.svg');
	background-repeat: no-repeat;
	background-position: calc(#{$var} * #{$x * -1}) calc(#{$var} * #{$y * -1});
	background-size: calc(#{$var} * 10) auto;
}

.class {
	color: variable(color, #fff);
	border-color: variable(color, primary, 40);  // 결과: var(--gd-color-base-20)
	color: variable(color, black);  // 결과: var(--gd-color-white)
	background: variable(color, primary, #052c65);  // 결과: var(--gd-color-primary-80)
	font-weight: variable(font, 400);  // 결과: var(--gd-font-regular)
	font-weight: variable(font, light);  // 결과: var(--gd-font-light)
	font-size: variable(font, 28px);  // 결과: var(--gd-font-regular)
	font-size: variable(font, body, 1.8rem);  // 결과: var(--gd-font-title-xl)
	font-size: variable(font, title, md);  // 결과: var(--gd-font-headline-md)
	font-size: variable(font, headline, md);  // 결과: var(--gd-font-headline-md)
	padding: variable(space, lg);  // 결과: var(--gd-space-lg)
	margin: variable(space, 3.2rem);  // 결과: var(--gd-space-xl)
	margin-left: variable(space, 30px);
	border: variable(border, .2rem) solid variable(color, #efefef);
	border: variable(border, sm) solid variable(color, black);
	border-radius: variable(radius, md);
	border-radius: variable(radius, 1.2rem);
}